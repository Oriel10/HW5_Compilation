2022-06-21 01:13:41.755 INFO  [28882] [startCompiler@26] Start compiler
2022-06-21 01:13:41.756 INFO  [28882] [openScope@97] Open scope in line: 1
2022-06-21 01:13:41.757 INFO  [28882] [llvmGen::genInitialFuncs@184] Generating intial functions
2022-06-21 01:13:41.757 INFO  [28882] [llvmGen::llvmEmit@143] Emitting command: define void @printi(i32) {
2022-06-21 01:13:41.758 INFO  [28882] [llvmGen::llvmEmit@143] Emitting command:     %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
2022-06-21 01:13:41.758 INFO  [28882] [llvmGen::llvmEmit@143] Emitting command:     call i32 (i8*, ...) @printf(i8* %spec_ptr, i32 %0)
2022-06-21 01:13:41.759 INFO  [28882] [llvmGen::llvmEmit@143] Emitting command:     ret void
2022-06-21 01:13:41.759 INFO  [28882] [llvmGen::llvmEmit@143] Emitting command: }
2022-06-21 01:13:41.760 INFO  [28882] [llvmGen::llvmEmit@143] Emitting command: 
2022-06-21 01:13:41.760 INFO  [28882] [llvmGen::llvmEmit@143] Emitting command: define void @print(i8*) {
2022-06-21 01:13:41.760 INFO  [28882] [llvmGen::llvmEmit@143] Emitting command:     %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0
2022-06-21 01:13:41.761 INFO  [28882] [llvmGen::llvmEmit@143] Emitting command:     call i32 (i8*, ...) @printf(i8* %spec_ptr, i8* %0)
2022-06-21 01:13:41.761 INFO  [28882] [llvmGen::llvmEmit@143] Emitting command:     ret void
2022-06-21 01:13:41.762 INFO  [28882] [llvmGen::llvmEmit@143] Emitting command: }
2022-06-21 01:13:41.762 INFO  [28882] [llvmGen::llvmEmit@143] Emitting command: 
2022-06-21 01:13:41.762 DEBUG [28882] [yyparse@87] line: 23,  RetType ->  VOID
2022-06-21 01:13:41.763 DEBUG [28882] [yyparse@92] line: 23,  Formals -> epsilon
2022-06-21 01:13:41.763 INFO  [28882] [openScope@97] Open scope in line: 24
2022-06-21 01:13:41.764 INFO  [28882] [llvmGen::genFuncDecl@164] Generaing function declaration: "main"
2022-06-21 01:13:41.764 INFO  [28882] [llvmGen::llvmEmit@143] Emitting command: define void @main() {
2022-06-21 01:13:41.764 INFO  [28882] [llvmGen::llvmEmit@143] Emitting command: %frame_ptr = alloca i32, i32 50
2022-06-21 01:13:41.765 INFO  [28882] [llvmGen::llvmEmit@143] Emitting command: 
2022-06-21 01:13:41.765 DEBUG [28882] [yyparse@219] line: 25,  Exp -> STRING
2022-06-21 01:13:41.766 INFO  [28882] [Exp::Exp@592] Exp -> *, * in {ID, NUM, STRING, TRUE, FALSE}: "hello"
2022-06-21 01:13:41.766 INFO  [28882] [llvmGen::llvmEmit@143] Emitting command: %var1 = getelementptr [6 x i8], [6 x i8]* @var0 , i32 0, i32 0
2022-06-21 01:13:41.767 INFO  [28882] [llvmGen::genGetElementPtr@222] %var1 = getelementptr [6 x i8], [6 x i8]* @var0 , i32 0, i32 0
2022-06-21 01:13:41.767 DEBUG [28882] [yyparse@189] line: 25,  ExpList -> Exp
2022-06-21 01:13:41.768 DEBUG [28882] [yyparse@182] line: 25,  Call -> ID LPAREN ExpList RPAREN
2022-06-21 01:13:41.769 INFO  [28882] [llvmGen::genCallFunc@326] Generating call function command of: print
2022-06-21 01:13:41.769 INFO  [28882] [SymbolTable::getFuncRetTypeAndArgsTypesByName@85] Looking for the return type of print
2022-06-21 01:13:41.770 DEBUG [28882] [llvmGen::genCallFunc@343] call void @print(i8* %var1)
2022-06-21 01:13:41.770 INFO  [28882] [llvmGen::llvmEmit@143] Emitting command: call void @print(i8* %var1)
2022-06-21 01:13:41.771 DEBUG [28882] [yyparse@133] line: 25,  Statement -> Call SC
2022-06-21 01:13:41.771 DEBUG [28882] [yyparse@110] line: 25,  Statements -> Statement
2022-06-21 01:13:41.772 INFO  [28882] [llvmGen::llvmEmit@143] Emitting command: br label @
2022-06-21 01:13:41.772 DEBUG [28882] [yyparse@117] line: 47,  NextInstMarker -> Epsilone
2022-06-21 01:13:41.773 DEBUG [28882] [yyparse@135] line: 47,  Statement -> RETURN SC
2022-06-21 01:13:41.774 INFO  [28882] [llvmGen::llvmEmit@143] Emitting command: ret void
2022-06-21 01:13:41.774 DEBUG [28882] [yyparse@112] line: 47,  Statements -> Statements Statement
2022-06-21 01:13:41.775 DEBUG [28882] [yyparse@79] line: 48,  FuncDecl -> RetType ID LPAREN Formals RPAREN LBRACE Statements RBRACE
2022-06-21 01:13:41.775 INFO  [28882] [llvmGen::llvmEmit@143] Emitting command: }

2022-06-21 01:13:41.776 INFO  [28882] [closeScope@121] Close scope in line: 48
2022-06-21 01:13:41.776 DEBUG [28882] [yyparse@70] line: 48,  Funcs -> epsilon
2022-06-21 01:13:41.776 DEBUG [28882] [yyparse@72] line: 48,  Funcs -> FuncDecl Funcs
2022-06-21 01:13:41.777 DEBUG [28882] [yyparse@65] line: 48,  Program -> Funcs
2022-06-21 01:13:41.777 INFO  [28882] [endCompiler@34] Print global buffer
2022-06-21 01:13:41.777 INFO  [28882] [endCompiler@36] Print code buffer
2022-06-21 01:13:41.778 INFO  [28882] [closeScope@121] Close scope in line: 48
2022-06-21 01:13:41.778 INFO  [28882] [endCompiler@40] End compiler
