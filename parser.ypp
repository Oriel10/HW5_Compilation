%{
    #include "production_rules.h"
    #include "error_output.hpp"
    #include "plog/include/plog/Log.h"
    #include "semantic_analizer.h"
    #include "llvm_gen.hpp"

    using namespace std;
    using namespace output;
    extern void closeScope();

    extern vector<SymbolTable> tables_stack;
    extern vector<int> offsets_stack;
    extern size_t loop_counter;
    extern char* yytext;

    extern int yylineno;
    extern llvmGen& llvm_inst;
    int yylex();
    void yyerror(char const*);
%}


%token VOID
%token INT
%token BYTE
%token B
%token BOOL
%token AUTO
%token TRUE
%token FALSE
%token RETURN
%token WHILE
%token BREAK
%token CONTINUE
%token SC
%token COMMA
%token ID
%token NUM
%token STRING

%token RBRACE
%token LBRACE
%token LPAREN
%token RPAREN

%right ASSIGN
%left OR
%left AND
%left RELOP_EQ /*new*/
%left RELOP_SIZE /*new*/
%left BINOP_PLUSMINUS /*new*/
%left BINOP_MULDIV /*new*/
%nonassoc CAST_PREC
%right NOT

%right IF
%right ELSE 



%%

Program :
        {startCompiler();} Funcs               {PLOGD << prodRule(1);
                                                endCompiler();                 }
;

Funcs :
        /*epsilon*/                            {PLOGD << prodRule(2);
                                                $$ = new Funcs();              }
    |   FuncDecl Funcs                         {PLOGD << prodRule(3);
                                                $$ = new Funcs();              }
; 

FuncDecl :
        RetType ID LPAREN Formals RPAREN LBRACE
        {$$ = new FuncDecl(dynamic_cast<RetType*>($1), $2, dynamic_cast<Formals*>($4));} 
        Statements RBRACE                      {PLOGD << prodRule(4);
                                                llvm_inst.closeFunc();
                                                closeScope();       }
;

RetType :
        Type                                   {PLOGD << prodRule(5);
                                                $$ = new RetType(dynamic_cast<Type*>($1));}
    |   VOID                                   {PLOGD << prodRule(6);
                                                $$ = new RetType($1);              }
;

Formals :
        /*epsilon*/                            {PLOGD << prodRule(7);
                                                $$ = new Formals();             }        
    |   FormalsList                            {PLOGD << prodRule(8);
                                                $$ = new Formals(dynamic_cast<FormalsList*>($1));}

FormalsList :
        FormalDecl                             {PLOGD << prodRule(9);
                                                $$ = new FormalsList(dynamic_cast<FormalDecl*>($1));       }
    |   FormalDecl COMMA FormalsList           {PLOGD << prodRule(10);
                                                $$ = new FormalsList(dynamic_cast<FormalDecl*>($1), dynamic_cast<FormalsList*>($3));    }
;

FormalDecl :
        Type ID                                {PLOGD << prodRule(11);
                                                $$ = new FormalDecl(dynamic_cast<Type*>($1), $2);    }
;

Statements :
        Statement                              {PLOGD << prodRule(12);
                                                $$ = new Statements();             }
    |   Statements Statement                   {PLOGD << prodRule(13);
                                                $$ = new Statements();             }
;

Statement :
        LBRACE M Statements RBRACE             {PLOGD << prodRule(14);
                                                $$ = new Statement();
                                                closeScope();                   }
    |   Type ID SC                             {PLOGD << prodRule(15);
                                                $$ = new Statement(dynamic_cast<Type*>($1), $2);}
    |   Type ID ASSIGN Exp SC                  {PLOGD << prodRule(16); 
                                                $$ = new Statement(dynamic_cast<Type*>($1), $2, dynamic_cast<Exp*>($4));}
    |   AUTO ID ASSIGN Exp SC                  {PLOGD << prodRule(17);
                                                $$ = new Statement($1, $2, dynamic_cast<Exp*>($4));}
    |   ID ASSIGN Exp SC                       {PLOGD << prodRule(18);
                                                $$ = new Statement($1, dynamic_cast<Exp*>($3));}
    |   Call SC                                {PLOGD << prodRule(19);
                                                $$ = new Statement(dynamic_cast<Call*>($1));           }
    |   RETURN SC                              {PLOGD << prodRule(20);
                                                $$ = new Statement($1);         }
    |   RETURN Exp SC                          {PLOGD << prodRule(21);
                                                $$ = new Statement(dynamic_cast<Exp*>($2));}
    |   IF LPAREN BOOL_EXP RPAREN M 
        Statement %prec IF                     {PLOGD << prodRule(22);
                                                $$ = new Statement($1, dynamic_cast<Exp*>($3), dynamic_cast<Statement*>($6));
                                                closeScope();                   }
    |   IF LPAREN BOOL_EXP RPAREN M 
        Statement ELSE M2 Statement            {PLOGD << prodRule(23);
                                                $$ = new Statement($1, dynamic_cast<Exp*>($3), $7);
                                                closeScope();}
    |   WHILE LPAREN BOOL_EXP RPAREN 
        {openScope(); loop_counter++;}
        Statement                              {PLOGD << prodRule(24);
                                                $$ = new Statement($1, dynamic_cast<Exp*>($3), dynamic_cast<Statement*>($6));
                                                closeScope(); loop_counter--;   }
    |   BREAK SC                               {PLOGD << prodRule(25);
                                                $$ = new Statement($1);         }
    |   CONTINUE SC                            {PLOGD << prodRule(26);
                                                $$ = new Statement($1);         }                                 
;

M :
        /*epsilon*/                            {PLOGD << prodRule(48); 
                                                openScope();                   }
;

M2 :
        /*epsilon*/                            {PLOGD << prodRule(49); 
                                                closeScope();                   
                                                openScope();                     }
;

BOOL_EXP :
        Exp                                    {$$ = new Exp(dynamic_cast<Exp*>($1)); }
;

Call :
        ID LPAREN ExpList RPAREN               {PLOGD << prodRule(27);
                                                $$ = new Call($1, dynamic_cast<ExpList*>($3));}
    |   ID LPAREN RPAREN                       {PLOGD << prodRule(28);
                                                $$ = new Call($1);                   }
;

ExpList :
        Exp                                    {PLOGD << prodRule(29);
                                                $$ = new ExpList(dynamic_cast<Exp*>($1));}
    |   Exp COMMA ExpList                      {PLOGD << prodRule(30);
                                                $$ = new ExpList(dynamic_cast<Exp*>($1), dynamic_cast<ExpList*>($3));}
;

Type :
        INT                                    {PLOGD << prodRule(31);
                                                $$ = new Type($1);              }
    |   BYTE                                   {PLOGD << prodRule(32);
                                                $$ = new Type($1);              }
    |   BOOL                                   {PLOGD << prodRule(33);
                                                $$ = new Type($1);              }
;

Exp :
        LPAREN Exp RPAREN                      {PLOGD << prodRule(34);
                                                $$ = new Exp($1, dynamic_cast<Exp*>($2), $3);}
    |   Exp BINOP_MULDIV Exp                   {PLOGD << prodRule(35);
                                                $$ = new Exp(dynamic_cast<Exp*>($1), $2, dynamic_cast<Exp*>($3));}
    |   Exp BINOP_PLUSMINUS Exp                {PLOGD << prodRule(35);
                                                $$ = new Exp(dynamic_cast<Exp*>($1), $2, dynamic_cast<Exp*>($3));}
    |   ID                                     {PLOGD << prodRule(36);
                                                $$ = new Exp(($1));                 }
    |   Call                                   {PLOGD << prodRule(37);
                                                $$ = new Exp(dynamic_cast<Call*>($1));}
    |   NUM                                    {PLOGD << prodRule(38);
                                                $$ = new Exp($1);                   }
    |   NUM B                                  {PLOGD << prodRule(39);
                                                $$ = new Exp($1, $2);               }
    |   STRING                                 {PLOGD << prodRule(40);
                                                $$ = new Exp($1);                   }
    |   TRUE                                   {PLOGD << prodRule(41);
                                                $$ = new Exp($1);                   }
    |   FALSE                                  {PLOGD << prodRule(42);
                                                $$ = new Exp($1);                   }
    |   NOT Exp                                {PLOGD << prodRule(43);
                                                $$ = new Exp($1, dynamic_cast<Exp*>($2));}
    |   Exp AND Exp                            {PLOGD << prodRule(44);
                                                $$ = new Exp(dynamic_cast<Exp*>($1), $2, dynamic_cast<Exp*>($3));}
    |   Exp OR Exp                             {PLOGD << prodRule(45);
                                                $$ = new Exp(dynamic_cast<Exp*>($1), $2, dynamic_cast<Exp*>($3));}
    |   Exp RELOP_EQ Exp                       {PLOGD << prodRule(46);
                                                $$ = new Exp(dynamic_cast<Exp*>($1), $2, dynamic_cast<Exp*>($3));}
    |   Exp RELOP_SIZE Exp                     {PLOGD << prodRule(46);
                                                $$ = new Exp(dynamic_cast<Exp*>($1), $2, dynamic_cast<Exp*>($3));}
    |   LPAREN Type RPAREN
         Exp %prec CAST_PREC                   {PLOGD << prodRule(47);
                                                $$ = new Exp(dynamic_cast<Type*>($2), dynamic_cast<Exp*>($4));}
;

%%

int main()
{
    return yyparse();
}

void yyerror(char const* s){
    if (yychar == YYUNDEF){
        output::errorLex(yylineno);
    }
    else{
        output::errorSyn(yylineno);
    }
}